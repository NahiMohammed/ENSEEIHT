module ExpAvecArbreBinaire : Expression = struct
  (* Type pour représenter les opérateurs binaires *)
  type op = Moins | Plus | Mult | Div

  (* Type pour représenter les expressions binaires *)
  type exp = Binaire of exp * op * exp | Entier of int

  (* Fonction pour évaluer une expression *)
  let rec eval expression =
    match expression with
    | Entier n -> n
    | Binaire (left, op, right) ->
      let left_value = eval left in
      let right_value = eval right in
      match op with
      | Moins -> left_value - right_value
      | Plus -> left_value + right_value
      | Mult -> left_value * right_value
      | Div -> left_value / right_value

  (* Tests : Vous pouvez ajouter des tests ici *)
end