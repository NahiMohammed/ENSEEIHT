import 'SimplePDL.ecore'

package simplepdl

-- Contraintes OCL pour le métamodèle de processus SIMPLEPDL :


context Process
-- le nom d'un processus doit être valide et non vide.
inv validName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')



context ProcessElement
-- Fonction : Retourne le Process d'un ProcessElement.
def: process(): Process =
	Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first()



context WorkSequence
-- deux activités doivent appartenir au même Process
inv successorAndPredecessorInSameProcess('Activities not in the same process : '
		+ self.predecessor.name + ' in ' + self.predecessor.process().name+ ' and '
		+ self.successor.name + ' in ' + self.successor.process().name
):
	self.process() = self.successor.process()
	and self.process() = self.predecessor.process()

--une dépendance ne peut pas être réflexive.
inv notReflexive: self.predecessor <> self.successor

context WorkDefinition
--deux sous-activités différentes d’un même processus ne peuvent pas avoir le même nom.
inv uniqNames: self.Process.processElements->select(pe | pe.oclIsKindOf(WorkDefinition))
	->collect(pe | pe.oclAsType(WorkDefinition))
	->forAll(w | self = w or self.name <> w.name)

-- le nom d’une activité ne doit être composé que de lettres, chiffres ou soulignés, un chiffre ne peut pas être première position.
inv validWDName('Invalid WD name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]+')
	
--le nom d’une activité doit être composé d’au moins deux caractères.
inv nameIsLongEnough('Name is too short: ' + self.name): self.name.size() >= 3	

context ResourceUse
--l’occurrence d’une ressource utilisée ne peut pas prendre un nombre négatif
inv PositiveResourceUsedNumber: self.OccurenceUsed >=0

context Resource
-- la quantite d’une ressource ne peut pas prendre un nombre négatif
inv PositiveResourceNumber: self.quantity >=0

-- le nom d’une resource ne doit être composé que de lettres, chiffres ou soulignés, un chiffre ne peut pas être première position.
inv validResourceName('Invalid ResourceUsed name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]+')
endpackage